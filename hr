import csv
import os
import time
import pandas as pd
import shutil
from datetime import datetime
from Adafruit_DHT import DHT11
from Adafruit_BMP.BMP280 import BMP280

# 설정
DHT_SENSOR = DHT11
DHT_PIN = 4
bmp = BMP280()
data_directory = "/path/to/data/files"  # 데이터 파일 저장 디렉터리
webpage_dir = "/path/to/your/website/images"

# 데이터 저장 함수
def collect_and_save_data(file_path):
    with open(file_path, mode='a', newline='') as file:
        writer = csv.writer(file)
        current_time = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
        
        # 센서 데이터 수집
        humidity, temperature = DHT11.read(DHT_SENSOR, DHT_PIN)
        pressure = bmp.read_pressure() / 100  # hPa 단위
        
        # 데이터 저장
        if humidity is not None and temperature is not None:
            writer.writerow([current_time, temperature, humidity, pressure])
            print(f"Saved: {current_time}, Temp: {temperature}, Humidity: {humidity}, Pressure: {pressure}")
        else:
            print("Failed to retrieve data from DHT11")

# 오래된 파일 삭제 함수
def delete_old_files(directory, max_age_days=730):
    current_time = time.time()
    max_age_seconds = max_age_days * 24 * 60 * 60
    for file_name in os.listdir(directory):
        file_path = os.path.join(directory, file_name)
        if os.path.isfile(file_path) and (current_time - os.path.getmtime(file_path)) > max_age_seconds:
            os.remove(file_path)
            print(f"Deleted old file: {file_path}")

# 그래프 생성 및 저장 함수
def plot_and_save(file_path, output_image_path):
    data = pd.read_csv(file_path)
    data['Time (GMT)'] = pd.to_datetime(data['Time (GMT)'])
    recent_data = data[data['Time (GMT)'] >= (pd.Timestamp.utcnow() - pd.Timedelta(hours=22))]

    if recent_data.empty:
        print("No data available. Creating empty graph.")
        plt.figure(figsize=(10, 7))
        plt.text(0.5, 0.5, 'No Data Available', fontsize=20, ha='center', va='center')
        plt.savefig(output_image_path)
        plt.close()
        return

    plt.figure(figsize=(12, 10))

    # 그래프 3개 생성
    plt.subplot(3, 1, 1)
    plt.plot(recent_data['Time (GMT)'], recent_data['Temperature (C)'], label='Temperature', color='lime')
    plt.title('Temperature')
    plt.xlabel('Time (GMT)')
    plt.ylabel('Temperature (°C)')
    plt.grid()

    plt.subplot(3, 1, 2)
    plt.plot(recent_data['Time (GMT)'], recent_data['Humidity (%)'], label='Humidity', color='blue')
    plt.title('Humidity')
    plt.xlabel('Time (GMT)')
    plt.ylabel('Humidity (%)')
    plt.grid()

    plt.subplot(3, 1, 3)
    plt.plot(recent_data['Time (GMT)'], recent_data['Pressure (hPa)'], label='Pressure', color='yellow')
    plt.title('Pressure')
    plt.xlabel('Time (GMT)')
    plt.ylabel('Pressure (hPa)')
    plt.grid()

    plt.tight_layout()
    plt.savefig(output_image_path)
    plt.close()
    print(f"Graph saved as {output_image_path}")

# 이미지 업로드 및 최신 파일 링크 업데이트
def upload_image(image_path, webpage_dir):
    # 새 파일 이름 생성 (예: graph_YYYYMMDD_HHMMSS.png)
    timestamp = datetime.utcnow().strftime('%Y%m%d_%H%M%S')
    new_image_name = f"graph_{timestamp}.png"
    new_image_path = os.path.join(webpage_dir, new_image_name)
    
    # 이미지 업로드
    shutil.copy(image_path, new_image_path)
    print(f"Uploaded image: {new_image_path}")
    
    # 최신 파일 링크 업데이트
    latest_image_path = os.path.join(webpage_dir, "latest_graph.png")
    shutil.copy(new_image_path, latest_image_path)
    print(f"Updated latest graph link: {latest_image_path}")


# 메인 실행 루프
data_file = os.path.join(data_directory, "sensor_data.csv")
while True:
    collect_and_save_data(data_file)
    delete_old_files(data_directory, max_age_days=730)  # 2년 지난 파일 삭제
    plot_and_save(data_file, "graph.png")
    upload_image("graph.png", webpage_dir)
    time.sleep(300)  # 5분 대기
