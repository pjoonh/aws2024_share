import asyncssh
import asyncio
import schedule
import os
from datetime import datetime
import csv

# SFTP 서버 정보
SFTP_SERVER = ''
SFTP_PORT = 0000
SFTP_USER = ''
SFTP_PASS = ''
REMOTE_PATH = '/'

# CSV와 사진 파일 경로
LOCAL_CSV_PATH = 'D:/sensor_data/sensor_data.csv'
LOCAL_PHOTO_PATH = 'D:/allskycam/photo.jpg'

# 업로드 함수
async def upload_file(local_file, remote_file):
    try:
        print(f"Trying to connect to the SFTP server to upload {local_file}...")
        async with asyncssh.connect(SFTP_SERVER, port=SFTP_PORT, username=SFTP_USER, password=SFTP_PASS,
                                    known_hosts=None) as conn:
            print("Connected to the SFTP server")
            async with conn.start_sftp_client() as sftp:
                await sftp.put(local_file, os.path.join(REMOTE_PATH, remote_file))
                print(f'Uploaded and renamed: {local_file} to {remote_file}')
    except Exception as e:
        print(f'Error uploading {local_file}: {e}')

# CSV 업데이트 및 업로드
async def update_and_upload_csv():
    try:
        # 센서 데이터 예시 (온도, 습도)
        temperature = round(20 + 5 * (os.urandom(1)[0] % 10) / 10, 2)  # 20~25도 사이 예시값
        humidity = round(40 + 10 * (os.urandom(1)[0] % 10) / 10, 2)     # 40~50% 사이 예시값
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        # CSV 파일에 데이터 추가
        file_exists = os.path.isfile(LOCAL_CSV_PATH)
        with open(LOCAL_CSV_PATH, mode='a', newline='') as csvfile:
            writer = csv.writer(csvfile)
            if not file_exists:
                writer.writerow(['Timestamp', 'Temperature', 'Humidity'])  # 헤더 추가
            writer.writerow([timestamp, temperature, humidity])
        
        print(f"Updated CSV with timestamp: {timestamp}, Temperature: {temperature}, Humidity: {humidity}")

        # CSV 파일 업로드
        await upload_file(LOCAL_CSV_PATH, 'sensor_data.csv')

    except Exception as e:
        print(f'Error updating or uploading CSV: {e}')

# 사진 업로드
async def upload_photo():
    try:
        if os.path.isfile(LOCAL_PHOTO_PATH):
            await upload_file(LOCAL_PHOTO_PATH, 'photo.jpg')
        else:
            print(f"Photo file not found at {LOCAL_PHOTO_PATH}")
    except Exception as e:
        print(f'Error uploading photo: {e}')

# 주기적으로 실행
async def upload_sensor_data_and_photo():
    await update_and_upload_csv()
    await upload_photo()

# 스케줄 등록
def run_sync(coroutine):
    @wraps(coroutine)
    def wrapper(*args, **kwargs):
        return asyncio.ensure_future(coroutine(*args, **kwargs))
    return wrapper

schedule.every(5).minutes.do(run_sync(upload_sensor_data_and_photo))

# 스케줄 실행 루프
async def run_schedule():
    while True:
        schedule.run_pending()
        await asyncio.sleep(5)

# 실행
asyncio.get_event_loop().run_until_complete(run_schedule())
